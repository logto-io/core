import { z } from 'zod';

import { extendedSocialUserInfoGuard } from './saml.js';

/**
 * Single sign on connector session
 *
 * @property state The state generated by Logto experience client.
 * @property redirectUri The redirect uri for the identity provider.
 * @property nonce OIDC only properties, generated by OIDC connector factory, used to verify the identity provider response.
 * @property userInfo The user info returned by the identity provider.
 *  SAML only properties, parsed from the SAML assertion.
 *  We store the assertion in the session storage after receiving it from the identity provider.
 *  So the client authentication handler can get it later.
 * @property connectorId The connector id.
 *
 * @remark this is a forked version of @logto/connector-kit
 * Simplified the type definition to only include the properties we need.
 * Create additional type guard to validate the session data.
 * @see @logto/connector-kit/types/social.ts
 */
export const singleSignOnConnectorSessionGuard = z.object({
  state: z.string(),
  redirectUri: z.string(),
  connectorId: z.string(),
  nonce: z.string().optional(),
  userInfo: extendedSocialUserInfoGuard.optional(),
});

export type SingleSignOnConnectorSession = z.infer<typeof singleSignOnConnectorSessionGuard>;

export const samlConnectorAssertionSessionGuard = z.object({
  state: z.string(),
  redirectUri: z.string(),
  connectorId: z.string(),
});

export type CreateSingleSignOnSession = (storage: SingleSignOnConnectorSession) => Promise<void>;

export type GetSingleSignOnSession = () => Promise<SingleSignOnConnectorSession>;
