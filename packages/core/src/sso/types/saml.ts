import { socialUserInfoGuard } from '@logto/connector-kit';
import { type Json, jsonGuard } from '@logto/schemas';
import { z } from 'zod';

// Since the SAML SSO user info will extend the basic social user info (will contain extra info like `organization`, `role` etc.), but for now we haven't decide what should be included in extended user info, so we just use the basic social user info guard here to keep SSOT.
const samlAttributeMappingGuard = socialUserInfoGuard;

// eslint-disable-next-line no-restricted-syntax
export const defaultAttributeMapping = Object.fromEntries(
  Object.keys(samlAttributeMappingGuard.shape).map((key) => [key, key])
) as AttributeMap;

const customizableAttributeMappingGuard = samlAttributeMappingGuard.partial();
export type CustomizableAttributeMap = z.infer<typeof customizableAttributeMappingGuard>;
export type AttributeMap = Required<CustomizableAttributeMap>;

/**
 * This is the metadata of SAML service provider, automatically generated by `tenantId` and `ssoConnectorId`.
 * See details in {@link @logto/core/src/sso/SamlConnector/index.ts}.
 */
const samlServiceProviderMetadataGuard = z.object({
  entityId: z.string().min(1),
  assertionConsumerServiceUrl: z.string().min(1),
});

export type SamlServiceProviderMetadata = z.infer<typeof samlServiceProviderMetadataGuard>;

// `.catchall(jsonGuard)` can not infer the type of `Record<string, Json>`, define it in another way.
export type SamlIdentityProviderMetadata = {
  signInEndpoint: string;
  x509Certificate: string;
  metadataUrl?: string;
  metadata?: string;
} & Record<string, Json>;

export const samlIdentityProviderMetadataGuard = z
  .object({
    signInEndpoint: z.string(),
    x509Certificate: z.string(),
    metadataUrl: z.string().optional(),
    metadata: z.string().optional(),
  })
  .catchall(jsonGuard) satisfies z.ZodType<SamlIdentityProviderMetadata>; // Allow extra fields, also need to fit the `JsonObject` type.

export const samlConnectorConfigGuard = samlIdentityProviderMetadataGuard
  .extend({ attributeMapping: customizableAttributeMappingGuard })
  .partial();

export type SamlConnectorConfig = z.infer<typeof samlConnectorConfigGuard>;

const samlMetadataGuard = z.object({
  serviceProvider: samlServiceProviderMetadataGuard,
  identityProvider: samlIdentityProviderMetadataGuard,
});

export type SamlMetadata = z.infer<typeof samlMetadataGuard>;

// Saml assertion returned user attribute value
export const extendedSocialUserInfoGuard = socialUserInfoGuard.catchall(z.unknown());
export type ExtendedSocialUserInfo = z.infer<typeof extendedSocialUserInfoGuard>;
